vinux_api.txt	Last change: June 18 2024
vinux_api - TABLE OF CONTENTS                                      *vinux_api*
==============================================================================
complete-api                                                    |complete-api|
lsp-api                                                         |lsp-api|
env-api                                                         |env-api|
util-api                                                        |util-api|


==============================================================================

complete-api                                                    *complete-api*
==============================================================================

te#complete#lookup_reference({type})			*te#complete#lookup_reference()*
		Find the location below the cursor where the function is called and list
    it in the quickfix window.
    {type} parameters specifies how to jump to the first result.
        sp  open in a split window
        vs  open in a vertical split window
        tabnew open a in a new tab window

te#complete#goto_def({type})                       *te#complete#goto_def*
    Jump to the definition of cursor word.
    {type} parameters specifies how to jump to the first result.
        sp  open in a split window
        vs  open in a vertical split window
        tabnew open a in a new tab window


lsp-api                                                    *lsp-api*
==============================================================================

te#lsp#diagnostics_info({type})                             *te#lsp#diagnostics_info*
    Get the specifies type of diagnostic info.
    type parameter is string, can be:
    'warning'
    'error'
  
te#lsp#install_server()                                      *te#lsp#install_server*
    Open a LSP serves installations management window.

te#lsp#code_len()                                           *te#lsp#code_len*
    Gets a list of possible commands that can be executed on the current document.

te#lsp#diagnostics_jump({direct})                           *te#lsp#diagnostics_jump*
    Jump to specifies direction diagnostic line
    Parameter {direct} can be:
    - 0. previous diagnostic info
    - 1. next diagnostic info

te#lsp#call_tree({in})                                          *te#lsp#call_tree*






env-api                                                    *env-api*
==============================================================================

util-api                                                    *util-api*
==============================================================================

te#utils#get_reg()                                        *te#utils#get_reg*
    Return a list which include all vim register contents

te#utils#pedit()
    Preview files that list in quickfix window

te#utils#cd_to_plugin()                                 *te#utils#cd_to_plugin*
    Prompt vinux's plugins' directories in command line window

te#utils#run_command({command}, [, {callback}] [,{arglist}] [, {flag}])         *te#utils#run_command*

    Run {command} in background. If {command} is a empty string, you can enter
    the command string in cmdline window.
    
    Other parameter:
    1. {callback} is a function type, it will be called once command finished.
    Optional.
    2. arglist is list type, it will be passed to {callback} once command finished. Optional.
    3. flag is integer type, it specifies whether open quickfix window after
    {command} finish or not. Optional.

    Example:
      "run git fetch command in background
      :call te#utils#run_command('git fetch --all')
      "run command from user input and open quickfix window after command finisfinished
      :call te#utils#run_command("", 1)
      "run make cscope command in background, it will generate cscope
      database, after finished, te#pg#add_cscope_out will be called with a:path argument.
      call te#utils#run_command('make O=. ARCH=arm SUBARCH=sunxi COMPILED_SOURCE=1 '.g:tagging_program.cur_val,
                               \ function('te#pg#add_cscope_out'),[a:path])

te#utils#check_health()                                                     *te#utils#check_health*
      Show vim health info in a new tabwindow.


vim:tw=78:sw=2:ts=2:ft=help:norl:nowrap:
